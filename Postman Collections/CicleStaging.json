{
	"info": {
		"_postman_id": "004c06db-bd73-4a53-8c18-ee189d120405",
		"name": "Cicle Staging",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Board",
			"item": [
				{
					"name": "Get All List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.totalList).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.lists).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.lists[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].cards).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.lists[0].archived).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.lists[0].archived.status).to.be.true;\r",
									"    pm.expect(jsonData.lists[0].archived.archivedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].complete).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.lists[0].complete.status).to.be.false;\r",
									"    pm.expect(jsonData.lists[0].createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].__v).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.lists[0].totalCard).to.be.an(\"number\");\r",
									"});\r",
									"\r",
									"//assert JSON Response Body Schema\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"totalList\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"lists\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"cards\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"archived\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"status\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"archivedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"status\",\r",
									"                \"archivedAt\"\r",
									"              ]\r",
									"            },\r",
									"            \"complete\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"status\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"type\": {\r",
									"                  \"type\": \"null\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"status\",\r",
									"                \"type\"\r",
									"              ]\r",
									"            },\r",
									"            \"createdAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"updatedAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"__v\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"totalCard\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"name\",\r",
									"            \"cards\",\r",
									"            \"archived\",\r",
									"            \"complete\",\r",
									"            \"createdAt\",\r",
									"            \"updatedAt\",\r",
									"            \"__v\",\r",
									"            \"totalCard\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"totalList\",\r",
									"    \"lists\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b8374384-034e-463e-91c2-f66ef4e107d6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "811b4b0c-ae94-4537-a5fe-49f321f6dcae"
							}
						}
					],
					"_postman_id": "ddf7415a-55fd-48a5-93b9-f3d96b23c508",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}/v2/boards/632e858a3c6e10177263cc77/lists?filter=all&limitList=10&limitCard=10&lastIndex=1&teamId=632e858a3c6e10177263cc74",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"boards",
								"632e858a3c6e10177263cc77",
								"lists"
							],
							"query": [
								{
									"key": "filter",
									"value": "all"
								},
								{
									"key": "limitList",
									"value": "10"
								},
								{
									"key": "limitCard",
									"value": "10"
								},
								{
									"key": "lastIndex",
									"value": "1"
								},
								{
									"key": "teamId",
									"value": "632e858a3c6e10177263cc74"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current List On Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url:pm.collectionVariables.get(\"url\")+\"/api/v1/lists/?companyId=61eba2c85080f47b25ddc8f8\",\r",
									"      method: 'POST',\r",
									"      header: {\r",
									"        'Accept': '*/*',\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': pm.collectionVariables.get(\"auth\") \r",
									"      },\r",
									"      body: {\r",
									"          mode: 'raw',\r",
									"    raw: JSON.stringify({\"selector\":{\r",
									"        \"boardId\":\"632e858a3c6e10177263cc77\"},\r",
									"        \"data\":{\r",
									"            \"name\":\"Postman List 1\"}})\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "2910e4c6-5a15-47d4-9215-006fe4a24b2a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyData = JSON.parse(responseBody)\r",
									"value = bodyData.lists[0]._id\r",
									"console.log(value)\r",
									"pm.environment.set(\"listid\", value);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"totalList\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"lists\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"cards\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"archived\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"status\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"status\"\r",
									"              ]\r",
									"            },\r",
									"            \"complete\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"status\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"type\": {\r",
									"                  \"type\": \"null\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"status\",\r",
									"                \"type\"\r",
									"              ]\r",
									"            },\r",
									"            \"createdAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"updatedAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"__v\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"totalCard\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"name\",\r",
									"            \"cards\",\r",
									"            \"archived\",\r",
									"            \"complete\",\r",
									"            \"createdAt\",\r",
									"            \"updatedAt\",\r",
									"            \"__v\",\r",
									"            \"totalCard\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"totalList\",\r",
									"    \"lists\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.totalList).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.lists).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.lists[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].cards).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.lists[0].archived).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.lists[0].archived.status).to.be.false;\r",
									"    pm.expect(jsonData.lists[0].complete).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.lists[0].complete.status).to.be.false;\r",
									"    pm.expect(jsonData.lists[0].complete.type).to.be.null;\r",
									"    pm.expect(jsonData.lists[0].createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.lists[0].totalCard).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d3ce36ea-31f1-4f87-ad1e-d728896774c6"
							}
						}
					],
					"_postman_id": "bcdbfaf8-d638-4824-8b6a-fd16edf6a92f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/boards/632e858a3c6e10177263cc77/lists?filter=default&companyId=61eba2c85080f47b25ddc8f8&teamId=632e858a3c6e10177263cc74",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"boards",
								"632e858a3c6e10177263cc77",
								"lists"
							],
							"query": [
								{
									"key": "filter",
									"value": "default"
								},
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								},
								{
									"key": "teamId",
									"value": "632e858a3c6e10177263cc74"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All List With Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.lists[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lists[0].cards).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.lists[0].cards[0]._id).to.be.a(\"string\");\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lists\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"cards\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"_id\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"name\",\r",
									"            \"cards\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"lists\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "57056f9a-5633-4801-a114-2e2c53b82d80"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url:pm.collectionVariables.get(\"url\")+\"/api/v1/cards/?companyId=61eba2c85080f47b25ddc8f8\",\r",
									"      method: 'POST',\r",
									"      header: {\r",
									"        'Accept': '*/*',\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': pm.collectionVariables.get(\"auth\") \r",
									"      },\r",
									"      body: {\r",
									"          mode: 'raw',\r",
									"    raw: JSON.stringify({\r",
									"        \"selector\": { \"boardId\": \"632e858a3c6e10177263cc77\", \"listId\": pm.environment.get(\"listid\")},\r",
									"\r",
									"    \"data\":{\"name\":\"buat card\",\"isPublic\":true}\r",
									"})\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3af11213-dae9-429f-8bf5-08db31aac38d"
							}
						}
					],
					"_postman_id": "2341d36b-0a2e-4a01-831f-1cfa7bf16d4a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v2/boards/632e858a3c6e10177263cc77/lists/cards?teamId=632e858a3c6e10177263cc74",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"boards",
								"632e858a3c6e10177263cc77",
								"lists",
								"cards"
							],
							"query": [
								{
									"key": "teamId",
									"value": "632e858a3c6e10177263cc74"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All List With Card [incorrect teamId]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Something went wrong.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "fa3fe756-4c6b-44d2-a8d4-f82c20c79080"
							}
						}
					],
					"_postman_id": "884c3cca-0b91-41c7-9535-943a908b2fa5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v2/boards/632e858a3c6e10177263cc77/lists/cards?teamId=632e858a3c6",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"boards",
								"632e858a3c6e10177263cc77",
								"lists",
								"cards"
							],
							"query": [
								{
									"key": "teamId",
									"value": "632e858a3c6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All List With Card [incorrect board id]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Board is not in this team\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "31340114-6ce4-4b84-927c-fb31c6e81a43"
							}
						}
					],
					"_postman_id": "1cfc6711-80af-498c-949f-c6e45ff6aec6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v2/boards/632e858a3/lists/cards?teamId=632e858a3c6e10177263cc74",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"boards",
								"632e858a3",
								"lists",
								"cards"
							],
							"query": [
								{
									"key": "teamId",
									"value": "632e858a3c6e10177263cc74"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Cards By Id List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"bodyData = JSON.parse(responseBody)\r",
									"value = bodyData.cards[0]._id\r",
									"console.log(value)\r",
									"pm.environment.set(\"cardid\", value);\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.totalCard).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.cards).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.cards[0].complete).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.cards[0].complete.status).to.be.false;\r",
									"    pm.expect(jsonData.cards[0].complete.type).to.be.null;\r",
									"    pm.expect(jsonData.cards[0].isNotified).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.cards[0].isNotified.startOneHour).to.be.false;\r",
									"    pm.expect(jsonData.cards[0].isNotified.startOneDay).to.be.false;\r",
									"    pm.expect(jsonData.cards[0].isNotified.dueOneHour).to.be.false;\r",
									"    pm.expect(jsonData.cards[0].isNotified.dueOneDay).to.be.false;\r",
									"    pm.expect(jsonData.cards[0].archived).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.cards[0].archived.status).to.be.false;\r",
									"    pm.expect(jsonData.cards[0].workload).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.cards[0].workload.value).to.be.null;\r",
									"    pm.expect(jsonData.cards[0].workload.measurement).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0].name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0].creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.cards[0].creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0].creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0].creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0].members).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.cards[0].members[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0].members[0].photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0].checklists).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.cards[0].cheers).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.cards[0].comments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.cards[0].labels).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.cards[0].attachments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.cards[0].isPublic).to.be.true;\r",
									"    pm.expect(jsonData.cards[0].createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0].updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.cards[0].__v).to.be.a(\"number\");\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"totalCard\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"cards\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"complete\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"status\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"type\": {\r",
									"                  \"type\": \"null\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"status\",\r",
									"                \"type\"\r",
									"              ]\r",
									"            },\r",
									"            \"isNotified\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"startOneHour\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"startOneDay\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"dueOneHour\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"dueOneDay\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"startOneHour\",\r",
									"                \"startOneDay\",\r",
									"                \"dueOneHour\",\r",
									"                \"dueOneDay\"\r",
									"              ]\r",
									"            },\r",
									"            \"archived\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"status\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"status\"\r",
									"              ]\r",
									"            },\r",
									"            \"workload\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"value\": {\r",
									"                  \"type\": \"null\"\r",
									"                },\r",
									"                \"measurement\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"value\",\r",
									"                \"measurement\"\r",
									"              ]\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"creator\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"fullName\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"photoUrl\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"fullName\",\r",
									"                \"photoUrl\"\r",
									"              ]\r",
									"            },\r",
									"            \"members\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"photoUrl\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"_id\",\r",
									"                    \"photoUrl\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"checklists\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"cheers\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"comments\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"labels\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"attachments\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"isPublic\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"createdAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"updatedAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"__v\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"complete\",\r",
									"            \"isNotified\",\r",
									"            \"archived\",\r",
									"            \"workload\",\r",
									"            \"_id\",\r",
									"            \"name\",\r",
									"            \"creator\",\r",
									"            \"members\",\r",
									"            \"checklists\",\r",
									"            \"cheers\",\r",
									"            \"comments\",\r",
									"            \"labels\",\r",
									"            \"attachments\",\r",
									"            \"isPublic\",\r",
									"            \"createdAt\",\r",
									"            \"updatedAt\",\r",
									"            \"__v\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"totalCard\",\r",
									"    \"cards\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "4c878200-3ce1-412a-b385-1a7b9ce2d336"
							}
						}
					],
					"_postman_id": "a9d2f318-c9fe-499b-9c06-70c123a07c69",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v2/lists/{{listid}}/cards?filter=all&limitCard=10&lastIndex=0",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"lists",
								"{{listid}}",
								"cards"
							],
							"query": [
								{
									"key": "filter",
									"value": "all"
								},
								{
									"key": "limitCard",
									"value": "10"
								},
								{
									"key": "lastIndex",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Cards By Id List [incorrect listId]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Something went wrong.\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3c667ef6-c964-450f-9630-f8e71956df4f"
							}
						}
					],
					"_postman_id": "a1c0bb72-1160-4e9f-a946-3f0f7a103975",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v2/lists/633db0f5a0/cards?filter=all&limitCard=10&lastIndex=0",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"lists",
								"633db0f5a0",
								"cards"
							],
							"query": [
								{
									"key": "filter",
									"value": "all"
								},
								{
									"key": "limitCard",
									"value": "10"
								},
								{
									"key": "lastIndex",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Card Detail By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"boardId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"card\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creator\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"fullName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"fullName\",\r",
									"            \"photoUrl\"\r",
									"          ]\r",
									"        },\r",
									"        \"members\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"photoUrl\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"photoUrl\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"checklists\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"cheers\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"labels\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"attachments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"complete\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"null\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        },\r",
									"        \"isNotified\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"startOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"startOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"startOneHour\",\r",
									"            \"startOneDay\",\r",
									"            \"dueOneHour\",\r",
									"            \"dueOneDay\"\r",
									"          ]\r",
									"        },\r",
									"        \"archived\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\"\r",
									"          ]\r",
									"        },\r",
									"        \"isPublic\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"workload\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"value\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"measurement\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"value\",\r",
									"            \"measurement\"\r",
									"          ]\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"creator\",\r",
									"        \"members\",\r",
									"        \"checklists\",\r",
									"        \"cheers\",\r",
									"        \"comments\",\r",
									"        \"labels\",\r",
									"        \"attachments\",\r",
									"        \"complete\",\r",
									"        \"isNotified\",\r",
									"        \"archived\",\r",
									"        \"isPublic\",\r",
									"        \"workload\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"boardId\",\r",
									"    \"card\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.boardId).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.members[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members[0].photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.checklists).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.cheers).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.comments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.labels).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.attachments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.complete).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.complete.status).to.be.false;\r",
									"    pm.expect(jsonData.card.complete.type).to.be.null;\r",
									"    pm.expect(jsonData.card.isNotified).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.isNotified.startOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.startOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.archived).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.archived.status).to.be.false;\r",
									"    pm.expect(jsonData.card.isPublic).to.be.true;\r",
									"    pm.expect(jsonData.card.workload).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.workload.value).to.be.null;\r",
									"    pm.expect(jsonData.card.workload.measurement).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.__v).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0c7988a7-9380-4ed1-90cb-4df2841235ba"
							}
						}
					],
					"_postman_id": "b38bffb1-cab7-4ad6-a15b-782963e14c8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": "{{url}}/v2/cards/{{cardid}}"
					},
					"response": []
				},
				{
					"name": "Toggle Multiple Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"card\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creator\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"fullName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"fullName\",\r",
									"            \"photoUrl\"\r",
									"          ]\r",
									"        },\r",
									"        \"members\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"photoUrl\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"photoUrl\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"checklists\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"cheers\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"labels\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"attachments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"complete\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"null\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        },\r",
									"        \"isNotified\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"startOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"startOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"startOneHour\",\r",
									"            \"startOneDay\",\r",
									"            \"dueOneHour\",\r",
									"            \"dueOneDay\"\r",
									"          ]\r",
									"        },\r",
									"        \"archived\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\"\r",
									"          ]\r",
									"        },\r",
									"        \"isPublic\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"workload\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"value\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"measurement\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"value\",\r",
									"            \"measurement\"\r",
									"          ]\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"creator\",\r",
									"        \"members\",\r",
									"        \"checklists\",\r",
									"        \"cheers\",\r",
									"        \"comments\",\r",
									"        \"labels\",\r",
									"        \"attachments\",\r",
									"        \"complete\",\r",
									"        \"isNotified\",\r",
									"        \"archived\",\r",
									"        \"isPublic\",\r",
									"        \"workload\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"card\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.members[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members[0].photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.checklists).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.cheers).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.comments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.labels).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.attachments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.complete).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.complete.status).to.be.false;\r",
									"    pm.expect(jsonData.card.complete.type).to.be.null;\r",
									"    pm.expect(jsonData.card.isNotified).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.isNotified.startOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.startOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.archived).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.archived.status).to.be.false;\r",
									"    pm.expect(jsonData.card.isPublic).to.be.true;\r",
									"    pm.expect(jsonData.card.workload).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.workload.value).to.be.null;\r",
									"    pm.expect(jsonData.card.workload.measurement).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.__v).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ded0836d-f621-4f59-b54f-36b875a1f7e2"
							}
						}
					],
					"_postman_id": "3eee97e5-002b-4ff4-a1ab-74a9ec16552c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"members\":[\"62f654d798ae1e904837df74\",\"6279e5ed3bad6058776bfa75\",\"5f915ab79de91e45bee269d5\",\"5f8648613a36b417e2f0f168\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/cards/{{cardid}}/members?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"cards",
								"{{cardid}}",
								"members"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Toggle Multiple Member [incorrect memberId]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Something went wrong.\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a8a73744-066e-4bf4-a1f4-d1a2e3135e27"
							}
						}
					],
					"_postman_id": "bfe00485-a024-4c1d-bbd6-0bf196376d66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"members\":[\"62f654d798a\",\"6279e5ed3bad6058776bfa75\",\"5f915ab79de91e45bee269d5\",\"5f8648613a36b417e2f0f168\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/cards/{{cardid}}/members?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"cards",
								"{{cardid}}",
								"members"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Toggle Multiple Labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"card\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creator\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"fullName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"fullName\",\r",
									"            \"photoUrl\"\r",
									"          ]\r",
									"        },\r",
									"        \"members\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"photoUrl\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"photoUrl\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"checklists\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"cheers\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"labels\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"color\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"_id\",\r",
									"                    \"name\"\r",
									"                  ]\r",
									"                },\r",
									"                \"createdAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"updatedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"__v\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"name\",\r",
									"                \"color\",\r",
									"                \"createdAt\",\r",
									"                \"updatedAt\",\r",
									"                \"__v\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"attachments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"complete\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"null\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        },\r",
									"        \"isNotified\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"startOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"startOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"startOneHour\",\r",
									"            \"startOneDay\",\r",
									"            \"dueOneHour\",\r",
									"            \"dueOneDay\"\r",
									"          ]\r",
									"        },\r",
									"        \"archived\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\"\r",
									"          ]\r",
									"        },\r",
									"        \"isPublic\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"workload\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"value\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"measurement\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"value\",\r",
									"            \"measurement\"\r",
									"          ]\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"creator\",\r",
									"        \"members\",\r",
									"        \"checklists\",\r",
									"        \"cheers\",\r",
									"        \"comments\",\r",
									"        \"labels\",\r",
									"        \"attachments\",\r",
									"        \"complete\",\r",
									"        \"isNotified\",\r",
									"        \"archived\",\r",
									"        \"isPublic\",\r",
									"        \"workload\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"card\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.members[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members[0].photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.checklists).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.cheers).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.comments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.labels).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.labels[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].color).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.labels[0].color._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].color.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.card.attachments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.complete).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.complete.status).to.be.false;\r",
									"    pm.expect(jsonData.card.complete.type).to.be.null;\r",
									"    pm.expect(jsonData.card.isNotified).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.isNotified.startOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.startOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.archived).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.archived.status).to.be.false;\r",
									"    pm.expect(jsonData.card.isPublic).to.be.true;\r",
									"    pm.expect(jsonData.card.workload).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.workload.value).to.be.null;\r",
									"    pm.expect(jsonData.card.workload.measurement).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.__v).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ee69c655-9e8f-4f12-b550-92d4b81efe6d"
							}
						}
					],
					"_postman_id": "5f020cf5-0947-453e-801f-591feec1b203",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"labels\":[\"6342d45e88f1e2f85f168c43\",\"6342d87fa321e9daae036f23\", \"6342d949a321e9daae037032\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/cards/{{cardid}}/labels?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"cards",
								"{{cardid}}",
								"labels"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch List Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Reorder list is success\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c6d018c6-3dfc-41e4-8e61-e922c2301933"
							}
						}
					],
					"_postman_id": "467cde56-c89f-4811-8feb-0b5bf1f9e2e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{\"draggableId\":\"633db0f5a082497f4380bbfd\",\r\n    \"type\":\"list\",\r\n    \"source\":{\"index\":0,\"droppableId\":\"all-lists\"},\r\n    \"reason\":\"DROP\",\r\n    \"mode\":\"FLUID\",\r\n    \"destination\":{\"droppableId\":\"all-lists\",\r\n    \"index\":1},\r\n    \"combine\":null},\r\n    \"selector\":{\"boardId\":\"632e858a3c6e10177263cc77\"}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/lists/position?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"lists",
								"position"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Card Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"card has been moved to\");\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"card\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creator\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"fullName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"fullName\",\r",
									"            \"photoUrl\"\r",
									"          ]\r",
									"        },\r",
									"        \"members\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"photoUrl\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"photoUrl\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"checklists\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"cheers\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"labels\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"color\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"_id\",\r",
									"                    \"name\"\r",
									"                  ]\r",
									"                },\r",
									"                \"createdAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"updatedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"__v\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"name\",\r",
									"                \"color\",\r",
									"                \"createdAt\",\r",
									"                \"updatedAt\",\r",
									"                \"__v\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"attachments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"complete\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"null\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        },\r",
									"        \"isNotified\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"startOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"startOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"startOneHour\",\r",
									"            \"startOneDay\",\r",
									"            \"dueOneHour\",\r",
									"            \"dueOneDay\"\r",
									"          ]\r",
									"        },\r",
									"        \"archived\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\"\r",
									"          ]\r",
									"        },\r",
									"        \"isPublic\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"workload\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"value\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"measurement\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"value\",\r",
									"            \"measurement\"\r",
									"          ]\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"creator\",\r",
									"        \"members\",\r",
									"        \"checklists\",\r",
									"        \"cheers\",\r",
									"        \"comments\",\r",
									"        \"labels\",\r",
									"        \"attachments\",\r",
									"        \"complete\",\r",
									"        \"isNotified\",\r",
									"        \"archived\",\r",
									"        \"isPublic\",\r",
									"        \"workload\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"card\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.members[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members[0].photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.checklists).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.cheers).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.comments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.labels).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.labels[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].color).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.labels[0].color._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].color.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.card.attachments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.complete).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.complete.status).to.be.false;\r",
									"    pm.expect(jsonData.card.complete.type).to.be.null;\r",
									"    pm.expect(jsonData.card.isNotified).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.isNotified.startOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.startOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.archived).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.archived.status).to.be.false;\r",
									"    pm.expect(jsonData.card.isPublic).to.be.true;\r",
									"    pm.expect(jsonData.card.workload).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.workload.value).to.be.null;\r",
									"    pm.expect(jsonData.card.workload.measurement).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.__v).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0273dd86-1eec-4305-bfcb-98437411c27e"
							}
						}
					],
					"_postman_id": "cb9d4160-abba-471e-bb57-91c5c637320e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data\":{\"draggableId\":\"{{cardid}}\",\"type\":\"card\",\"source\":{\"index\":0,\"droppableId\":\"{{listid}}\"},\"reason\":\"DROP\",\"mode\":\"FLUID\",\"destination\":{\"droppableId\":\"{{listid}}\",\"index\":1},\"combine\":null},\"selector\":{\"boardId\":\"632e858a3c6e10177263cc77\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/cards/position?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"cards",
								"position"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Card Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Update card is success\");\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"card\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creator\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"fullName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"fullName\",\r",
									"            \"photoUrl\"\r",
									"          ]\r",
									"        },\r",
									"        \"members\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"photoUrl\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"photoUrl\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"checklists\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"cheers\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"labels\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"color\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"_id\",\r",
									"                    \"name\"\r",
									"                  ]\r",
									"                },\r",
									"                \"createdAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"updatedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"__v\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"name\",\r",
									"                \"color\",\r",
									"                \"createdAt\",\r",
									"                \"updatedAt\",\r",
									"                \"__v\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"attachments\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"complete\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"null\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        },\r",
									"        \"isNotified\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"startOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"startOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneHour\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"dueOneDay\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"startOneHour\",\r",
									"            \"startOneDay\",\r",
									"            \"dueOneHour\",\r",
									"            \"dueOneDay\"\r",
									"          ]\r",
									"        },\r",
									"        \"archived\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"status\": {\r",
									"              \"type\": \"boolean\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"status\"\r",
									"          ]\r",
									"        },\r",
									"        \"isPublic\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"workload\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"value\": {\r",
									"              \"type\": \"null\"\r",
									"            },\r",
									"            \"measurement\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"value\",\r",
									"            \"measurement\"\r",
									"          ]\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"creator\",\r",
									"        \"members\",\r",
									"        \"checklists\",\r",
									"        \"cheers\",\r",
									"        \"comments\",\r",
									"        \"labels\",\r",
									"        \"attachments\",\r",
									"        \"complete\",\r",
									"        \"isNotified\",\r",
									"        \"archived\",\r",
									"        \"isPublic\",\r",
									"        \"workload\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"card\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.members[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.members[0].photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.checklists).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.cheers).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.comments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.labels).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.labels[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].color).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.labels[0].color._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].color.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.labels[0].__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.card.attachments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.card.complete).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.complete.status).to.be.false;\r",
									"    pm.expect(jsonData.card.complete.type).to.be.null;\r",
									"    pm.expect(jsonData.card.isNotified).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.isNotified.startOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.startOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneHour).to.be.false;\r",
									"    pm.expect(jsonData.card.isNotified.dueOneDay).to.be.false;\r",
									"    pm.expect(jsonData.card.archived).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.archived.status).to.be.false;\r",
									"    pm.expect(jsonData.card.isPublic).to.be.true;\r",
									"    pm.expect(jsonData.card.workload).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.card.workload.value).to.be.null;\r",
									"    pm.expect(jsonData.card.workload.measurement).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.card.__v).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6dc76374-0ae3-4806-a758-614d61efae19"
							}
						}
					],
					"_postman_id": "67354fe8-56c0-4f8c-8d1d-7ab5f927ae89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Fitur A-1\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/cards/{{cardid}}?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"cards",
								"{{cardid}}"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive List On Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"list has been moved to archived\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "340abe3b-765f-4c6a-bc69-a4ada8073fcc"
							}
						}
					],
					"_postman_id": "9717bcff-dda1-40d1-bf25-ba833714ccd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"boardId\":\"632e858a3c6e10177263cc77\",\r\n\"cards\":[\"{{cardid}}\"],\r\n\"selector\":{\"boardId\":\"632e858a3c6e10177263cc77\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/lists/{{listid}}/archived?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"lists",
								"{{listid}}",
								"archived"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "9e10dc3e-78e6-4bf9-9385-09a1156514d7"
		},
		{
			"name": "Group Chat",
			"item": [
				{
					"name": "Post Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"content\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creator\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"googleId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"fullName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bio\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"status\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"defaultCompany\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"companies\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"createdAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"updatedAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"__v\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"googleId\",\r",
									"            \"email\",\r",
									"            \"fullName\",\r",
									"            \"photoUrl\",\r",
									"            \"bio\",\r",
									"            \"status\",\r",
									"            \"defaultCompany\",\r",
									"            \"companies\",\r",
									"            \"createdAt\",\r",
									"            \"updatedAt\",\r",
									"            \"__v\"\r",
									"          ]\r",
									"        },\r",
									"        \"isDeleted\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"type\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"content\",\r",
									"        \"creator\",\r",
									"        \"isDeleted\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\",\r",
									"        \"type\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.data._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.content).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.data.creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.googleId).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.bio).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.defaultCompany).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.companies).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.data.creator.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.data.isDeleted).to.be.false;\r",
									"    pm.expect(jsonData.data.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.data.type).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "72e8de51-9b72-4900-97a4-a4723162f5ee"
							}
						}
					],
					"_postman_id": "3fcbc18c-6b6a-4559-9c2a-5ecd78157cf2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"content\":\"<p>coba</p>\",\"mentionedUsers\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/group-chats/632e858a3c6e10177263cc78/messages?companyId=61eba2c85080f47b25ddc8f8&teamId=632e858a3c6e10177263cc74",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"group-chats",
								"632e858a3c6e10177263cc78",
								"messages"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								},
								{
									"key": "teamId",
									"value": "632e858a3c6e10177263cc74"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Message [incomplete path]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Route not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b7000580-851d-4ac7-8a12-f62c05927834"
							}
						}
					],
					"_postman_id": "57156169-f997-4d8c-91f2-53cbe81de2c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"content\":\"<p>coba</p>\",\"mentionedUsers\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/632e858a3c6e10177263cc78/messages?companyId=61eba2c85080f47b25ddc8f8&teamId=632e858a3c6e10177263cc74",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"632e858a3c6e10177263cc78",
								"messages"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								},
								{
									"key": "teamId",
									"value": "632e858a3c6e10177263cc74"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Message [null companyID]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"content\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creator\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"googleId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"fullName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bio\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"status\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"defaultCompany\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"companies\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"createdAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"updatedAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"__v\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"googleId\",\r",
									"            \"email\",\r",
									"            \"fullName\",\r",
									"            \"photoUrl\",\r",
									"            \"bio\",\r",
									"            \"status\",\r",
									"            \"defaultCompany\",\r",
									"            \"companies\",\r",
									"            \"createdAt\",\r",
									"            \"updatedAt\",\r",
									"            \"__v\"\r",
									"          ]\r",
									"        },\r",
									"        \"isDeleted\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"type\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"content\",\r",
									"        \"creator\",\r",
									"        \"isDeleted\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\",\r",
									"        \"type\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.data._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.content).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.data.creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.googleId).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.bio).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.defaultCompany).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.companies).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.data.creator.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.data.isDeleted).to.be.false;\r",
									"    pm.expect(jsonData.data.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.data.type).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9f07c083-aa35-44de-8213-c3e45748f3b3"
							}
						}
					],
					"_postman_id": "b71b23f4-e86c-40f5-b57b-05a0904bb0b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"content\":\"<p>coba</p>\",\"mentionedUsers\":[]}",
							"options": {}
						},
						"url": {
							"raw": "{{url}}/api/v1/group-chats/632e858a3c6e10177263cc78/messages?companyId=&teamId=632e858a3c6e10177263cc74",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"group-chats",
								"632e858a3c6e10177263cc78",
								"messages"
							],
							"query": [
								{
									"key": "companyId",
									"value": ""
								},
								{
									"key": "teamId",
									"value": "632e858a3c6e10177263cc74"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Message with Mention",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"content\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"creator\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"googleId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"email\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"fullName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"photoUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bio\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"status\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"defaultCompany\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"companies\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            },\r",
									"            \"createdAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"updatedAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"__v\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"googleId\",\r",
									"            \"email\",\r",
									"            \"fullName\",\r",
									"            \"photoUrl\",\r",
									"            \"bio\",\r",
									"            \"status\",\r",
									"            \"defaultCompany\",\r",
									"            \"companies\",\r",
									"            \"createdAt\",\r",
									"            \"updatedAt\",\r",
									"            \"__v\"\r",
									"          ]\r",
									"        },\r",
									"        \"isDeleted\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"type\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"content\",\r",
									"        \"creator\",\r",
									"        \"isDeleted\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\",\r",
									"        \"type\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.data._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.content).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.data.creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.googleId).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.bio).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.defaultCompany).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.companies).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.data.creator.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.creator.__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.data.isDeleted).to.be.false;\r",
									"    pm.expect(jsonData.data.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.data.type).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8e8ba3fd-4aa2-433e-b12e-05063f358707"
							}
						}
					],
					"_postman_id": "4b432139-a6cd-4045-bf33-a093b1bc3bcb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"content\":\"<p><span class=\\\"fr-deletable fr-tribute\\\" contenteditable=\\\"false\\\" data-mentioned-user-id=\\\"6308670a358f72eee02fa3ee\\\" id=\\\"mentioned-user\\\" style=\\\"padding:1px; background-color:#e8ffff; border-radius:2px; display:inline-flex; align-items:center\\\"><img style=\\\"width:20px; height:20px; object-fit: cover; margin-right:3px; border-radius:100%;\\\" src=\\\"https://lh3.googleusercontent.com/a-/AFdZucoCVOSWoVrADWgZwDYcHcnqnUDpFI-DrkhpEJG1=s96-c\\\"><a href=\\\"/companies/61eba2c85080f47b25ddc8f8/profiles/6308670a358f72eee02fa3ee\\\">Fira</a></span> <span class=\\\"fr-deletable fr-tribute\\\" contenteditable=\\\"false\\\" data-mentioned-user-id=\\\"6308670a358f72eee02fa3ee\\\" id=\\\"mentioned-user\\\" style=\\\"padding:1px; background-color:#e8ffff; border-radius:2px; display:inline-flex; align-items:center\\\"><img style=\\\"width:20px; height:20px; object-fit: cover; margin-right:3px; border-radius:100%;\\\" src=\\\"https://lh3.googleusercontent.com/a-/AFdZucoCVOSWoVrADWgZwDYcHcnqnUDpFI-DrkhpEJG1=s96-c\\\"><a href=\\\"/companies/61eba2c85080f47b25ddc8f8/profiles/6308670a358f72eee02fa3ee\\\">Fira</a></span>&nbsp; coba mention</p>\",\"mentionedUsers\":[\"6308670a358f72eee02fa3ee\"]}\r\n",
							"options": {}
						},
						"url": {
							"raw": "{{url}}/api/v1/group-chats/632e858a3c6e10177263cc78/messages?companyId=61eba2c85080f47b25ddc8f8&teamId=632e858a3c6e10177263cc74",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"group-chats",
								"632e858a3c6e10177263cc78",
								"messages"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								},
								{
									"key": "teamId",
									"value": "632e858a3c6e10177263cc74"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"groupChat\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"messages\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"content\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"creator\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"fullName\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"photoUrl\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"_id\",\r",
									"                    \"fullName\",\r",
									"                    \"photoUrl\"\r",
									"                  ]\r",
									"                },\r",
									"                \"isDeleted\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"createdAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"updatedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"__v\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"content\",\r",
									"                \"creator\",\r",
									"                \"isDeleted\",\r",
									"                \"createdAt\",\r",
									"                \"updatedAt\",\r",
									"                \"__v\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"messages\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"groupChat\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.groupChat).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.groupChat._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.groupChat.messages).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.groupChat.messages[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.groupChat.messages[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.groupChat.messages[0].creator).to.be.an(\"object\")\r",
									"    pm.expect(jsonData.groupChat.messages[0].creator._id).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.groupChat.messages[0].creator.fullName).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.groupChat.messages[0].creator.photoUrl).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.groupChat.messages[0].isDeleted).to.be.false;\r",
									"    pm.expect(jsonData.groupChat.messages[0].createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.groupChat.messages[0].updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.groupChat.messages[0].__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.groupChat.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.groupChat.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.groupChat.__v).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "560bc1bf-a9ac-41c4-b12f-0f201b357806"
							}
						}
					],
					"_postman_id": "425f35d8-47eb-420c-842c-80cad9589216",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": "{{url}}/api/v1/group-chats/632e858a3c6e10177263cc78"
					},
					"response": []
				},
				{
					"name": "Get All Message [unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "923a3410-ffd5-4cde-862f-ecd2fc63552a"
							}
						}
					],
					"_postman_id": "08693517-7120-47ad-a60b-0d3b97be2aa3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{url}}/api/v1/group-chats/632e858a3c6e10177263cc78"
					},
					"response": []
				},
				{
					"name": "Post Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Upload attachments is success\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "311fe73e-677d-44cd-b2be-7dce996438e7"
							}
						}
					],
					"_postman_id": "47da5c13-795c-4746-8716-4870eb605f78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/IKRAMAH/Downloads/WhatsApp Image 2022-08-24 at 10.01.50 PM.jpeg"
								}
							],
							"options": {}
						},
						"url": {
							"raw": "{{url}}/api/v1/group-chats/632e858a3c6e10177263cc78/attachments?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"group-chats",
								"632e858a3c6e10177263cc78",
								"attachments"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Large File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 413\", function () {\r",
									"    pm.response.to.have.status(413);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Request Entity Too Large\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c6cbd48c-b5eb-42c5-9a26-a918aea7764b"
							}
						}
					],
					"_postman_id": "dd6c296a-0037-4b3e-96cc-14c174314c09",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/IKRAMAH/Videos/Captures/Free Masterclass By Jim Kwik_ Train Your Brain to Speed Read and Retain More Information - Replay - Google Chrome 2021-08-28 16-00-17.mp4"
								}
							],
							"options": {}
						},
						"url": {
							"raw": "{{url}}/api/v1/group-chats/632e858a3c6e10177263cc78/attachments?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"group-chats",
								"632e858a3c6e10177263cc78",
								"attachments"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Unusual File Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Upload attachments is success\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e39fc072-99ce-4608-9ba6-5cb7e933ca21"
							}
						}
					],
					"_postman_id": "e35f42d6-f1ef-43ca-9ef4-353a1e186dbc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/IKRAMAH/Downloads/Addlist.jmx"
								}
							],
							"options": {}
						},
						"url": {
							"raw": "{{url}}/api/v1/group-chats/632e858a3c6e10177263cc78/attachments?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"group-chats",
								"632e858a3c6e10177263cc78",
								"attachments"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "48514397-7e03-4d63-b3c6-77d68d3bdeb7"
		},
		{
			"name": "Check In",
			"item": [
				{
					"name": "Post Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyData = JSON.parse(responseBody)\r",
									"value = bodyData.checkIn.questions[0]._id\r",
									"console.log(value)\r",
									"pm.environment.set(\"questionid\", value);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"checkIn\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"questions\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"schedule\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"days\": {\r",
									"                      \"type\": \"array\",\r",
									"                      \"items\": [\r",
									"                        {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      ]\r",
									"                    },\r",
									"                    \"hour\": {\r",
									"                      \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"minute\": {\r",
									"                      \"type\": \"integer\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"days\",\r",
									"                    \"hour\",\r",
									"                    \"minute\"\r",
									"                  ]\r",
									"                },\r",
									"                \"archived\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"status\": {\r",
									"                      \"type\": \"boolean\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"status\"\r",
									"                  ]\r",
									"                },\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"title\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"creator\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"googleId\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"email\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"fullName\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"photoUrl\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"bio\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"status\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"defaultCompany\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"companies\": {\r",
									"                      \"type\": \"array\",\r",
									"                      \"items\": {}\r",
									"                    },\r",
									"                    \"createdAt\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"updatedAt\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"__v\": {\r",
									"                      \"type\": \"integer\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"_id\",\r",
									"                    \"googleId\",\r",
									"                    \"email\",\r",
									"                    \"fullName\",\r",
									"                    \"photoUrl\",\r",
									"                    \"bio\",\r",
									"                    \"status\",\r",
									"                    \"defaultCompany\",\r",
									"                    \"companies\",\r",
									"                    \"createdAt\",\r",
									"                    \"updatedAt\",\r",
									"                    \"__v\"\r",
									"                  ]\r",
									"                },\r",
									"                \"comments\": {\r",
									"                  \"type\": \"array\",\r",
									"                  \"items\": {}\r",
									"                },\r",
									"                \"subscribers\": {\r",
									"                  \"type\": \"array\",\r",
									"                  \"items\": [\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  ]\r",
									"                },\r",
									"                \"isPublic\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"createdAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"updatedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"__v\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"schedule\",\r",
									"                \"archived\",\r",
									"                \"_id\",\r",
									"                \"title\",\r",
									"                \"creator\",\r",
									"                \"comments\",\r",
									"                \"subscribers\",\r",
									"                \"isPublic\",\r",
									"                \"createdAt\",\r",
									"                \"updatedAt\",\r",
									"                \"__v\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"questions\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"checkIn\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.checkIn._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].schedule).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].schedule.days).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].schedule.hour).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].schedule.minute).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].archived).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].archived.status).to.be.false;\r",
									"    pm.expect(jsonData.checkIn.questions[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].title).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.googleId).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.fullName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.photoUrl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.bio).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.defaultCompany).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.companies).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].creator.__v).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].comments).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].subscribers).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].isPublic).to.be.false;\r",
									"    pm.expect(jsonData.checkIn.questions[0].createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.checkIn.questions[0].__v).to.be.a(\"number\");\r",
									"})"
								],
								"type": "text/javascript",
								"id": "5770b50f-f551-49a3-9b35-b9c2394b4384"
							}
						}
					],
					"_postman_id": "988094ba-3dc0-42d4-af24-a67df6a497ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "jwt eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjYzMDg2NzBhMzU4ZjcyZWVlMDJmYTNlZSIsImdvb2dsZUlkIjoiMTA0MTA0MzA1NTM5Mjk4Mjk4MTQxIiwiZW1haWwiOiJpa3JhbWFoLm1hZ2hmaXJhaDI4QGdtYWlsLmNvbSIsImZ1bGxOYW1lIjoiRmlyYSIsInBob3RvVXJsIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y29DVk9TV29WckFEV2dad0RZY0hjbnFuVURwRkktRHJraHBFSkcxPXM5Ni1jIiwiYmlvIjoiU3R1ZGVudCBvZiBTZWtvbGFoIFFBIGJhdGNoIDE0Iiwic3RhdHVzIjoiU3R1ZGVudCIsImRlZmF1bHRDb21wYW55Ijp7Il9pZCI6IjYxZWJhMmM4NTA4MGY0N2IyNWRkYzhmOCJ9LCJjcmVhdGVkQXQiOiIyMDIyLTA4LTI2VDA2OjI0OjEwLjUyNVoiLCJ1cGRhdGVkQXQiOiIyMDIyLTA5LTI0VDA2OjE3OjA3LjI1OVoiLCJfX3YiOjB9LCJpYXQiOjE2NjQ4OTM1NjgsImV4cCI6MTY2NzQ4NTU2OH0.Gb6_SmZ2FPYz1fUum5idnCpam6JelzF58PkEToyH-o4",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"Ini percobaan\",\r\n    \"subscribers\":[\"6308670a358f72eee02fa3ee\",\"62f654d798ae1e904837df74\",\"6279e5ed3bad6058776bfa75\",\"5f915ab79de91e45bee269d5\",\"5f8648613a36b417e2f0f168\"],\r\n    \"schedule\":{\"days\":[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"],\r\n    \"hour\":2,\r\n    \"minute\":0},\r\n    \"isPublic\":false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/check-ins/632e858a3c6e10177263cc7a/questions?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"check-ins",
								"632e858a3c6e10177263cc7a",
								"questions"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Question Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Get Question Detail successful\");\r",
									"});\r",
									"pm.test(\"Question ID equal to environment question ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    expectedID = pm.environment.get(\"questionid\");\r",
									"    pm.expect(jsonData.question._id).to.eql(expectedID);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "0df35fc3-76cd-4a32-98f3-cb4968ddf005"
							}
						}
					],
					"_postman_id": "0bbb8391-1866-43e9-a089-bc3281ad6431",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/questions/{{questionid}}?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"questions",
								"{{questionid}}"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Question Detail [null companyId]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Get Question Detail successful\");\r",
									"});\r",
									"pm.test(\"Question ID equal to environment question ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    expectedID = pm.environment.get(\"questionid\");\r",
									"    pm.expect(jsonData.question._id).to.eql(expectedID);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "60516256-57c0-48c1-a528-c8215b6af9be"
							}
						}
					],
					"_postman_id": "8272de14-1fe3-4014-9898-f5cde1edd9dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/questions/{{questionid}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"questions",
								"{{questionid}}"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Questions [limit null]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Get detail list check in successful\");\r",
									"});\r",
									"pm.test(\"Question ID equal to environment question ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    expectedID = pm.environment.get(\"questionid\");\r",
									"    pm.expect(jsonData.checkIns[0]._id).to.eql(expectedID);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "0a41a369-9b12-4b92-ac23-f72b8066d816"
							}
						}
					],
					"_postman_id": "d13c9111-ef38-4c09-b3eb-9f022d23f35d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v2/check-ins/632e858a3c6e10177263cc7a?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"check-ins",
								"632e858a3c6e10177263cc7a"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Get detail list check in successful\");\r",
									"});\r",
									"pm.test(\"Question ID equal to environment question ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    expectedID = pm.environment.get(\"questionid\");\r",
									"    pm.expect(jsonData.checkIns[0]._id).to.eql(expectedID);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "b13ca106-e9c1-4393-bc00-da95b4ad4849"
							}
						}
					],
					"_postman_id": "d53a365f-6b61-4676-a68f-53431c225f0f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v2/check-ins/632e858a3c6e10177263cc7a?limit=10&companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"check-ins",
								"632e858a3c6e10177263cc7a"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "43b3a532-7f9e-44ff-9df9-3104c80aa7f1"
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Get All By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Fetch notifications successful\");\r",
									"});\r",
									"\r",
									"bodyData = JSON.parse(responseBody)\r",
									"value = bodyData.notifications[0]._id\r",
									"console.log(value)\r",
									"pm.environment.set(\"notifid\", value);\r",
									"\r",
									"pm.test(\"Notification ID equal to environment notification ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    expectedID = pm.environment.get(\"notifid\");\r",
									"    pm.expect(jsonData.notifications[0]._id).to.eql(expectedID);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "44169db4-fad3-4a3a-bd0c-3d044c32796c"
							}
						}
					],
					"_postman_id": "852704ad-309e-435a-b1fe-12806ee0cd50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/notifications?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"notifications"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unread Counter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Fetch unread notifications & chats successful\");\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"unreadNotification\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"unreadChat\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"unreadNotification\",\r",
									"        \"unreadChat\"\r",
									"      ]\r",
									"    },\r",
									"    \"currentCompany\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"workloadCapacityDefault\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"value\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"measurement\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"value\",\r",
									"            \"measurement\"\r",
									"          ]\r",
									"        },\r",
									"        \"logo\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"admins\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"members\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"teams\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"desc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"membersJoined\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"member\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"joinedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"member\",\r",
									"                \"joinedAt\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"workloadCapacityDefault\",\r",
									"        \"logo\",\r",
									"        \"admins\",\r",
									"        \"members\",\r",
									"        \"teams\",\r",
									"        \"name\",\r",
									"        \"desc\",\r",
									"        \"membersJoined\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"data\",\r",
									"    \"currentCompany\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.data.unreadNotification).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.data.unreadChat).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.currentCompany).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.currentCompany._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.workloadCapacityDefault).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.currentCompany.workloadCapacityDefault.value).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.currentCompany.workloadCapacityDefault.measurement).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.logo).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.admins).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.currentCompany.members).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.currentCompany.teams).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.currentCompany.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.desc).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.membersJoined).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.currentCompany.membersJoined[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.membersJoined[0].member).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.membersJoined[0].joinedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.__v).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6b604ccf-ac55-4acf-8c76-64b6dcbcb35a"
							}
						}
					],
					"_postman_id": "3d24c270-9d30-414f-bb25-b3f4a7fffe7f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/notifications/counter?companyId=61eba2c85080f47b25ddc8f8&teamId=632e858a3c6e10177263cc74",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"notifications",
								"counter"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								},
								{
									"key": "teamId",
									"value": "632e858a3c6e10177263cc74"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unread Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Fetch unread only notifications successful\");\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notifications\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"currentCompany\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"workloadCapacityDefault\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"value\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"measurement\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"value\",\r",
									"            \"measurement\"\r",
									"          ]\r",
									"        },\r",
									"        \"logo\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"admins\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"members\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"teams\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"desc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"membersJoined\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"member\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"joinedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"member\",\r",
									"                \"joinedAt\",\r",
									"                \"_id\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"__v\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"_id\",\r",
									"        \"workloadCapacityDefault\",\r",
									"        \"logo\",\r",
									"        \"admins\",\r",
									"        \"members\",\r",
									"        \"teams\",\r",
									"        \"name\",\r",
									"        \"desc\",\r",
									"        \"membersJoined\",\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"__v\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"notifications\",\r",
									"    \"currentCompany\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.notifications).to.be.an(\"array\");;\r",
									"    pm.expect(jsonData.currentCompany).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.currentCompany._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.workloadCapacityDefault).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.currentCompany.workloadCapacityDefault.value).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.currentCompany.workloadCapacityDefault.measurement).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.logo).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.admins).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.currentCompany.members).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.currentCompany.teams).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.currentCompany.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.desc).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.membersJoined).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.currentCompany.membersJoined[0]._id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.membersJoined[0].member).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.membersJoined[0].joinedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.currentCompany.__v).to.be.a(\"number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "eaf18d0c-45a6-4f2d-bbfa-f93cffa9625e"
							}
						}
					],
					"_postman_id": "ead441d8-4bf8-483c-8d98-990f16169319",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/notifications/unread?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"notifications",
								"unread"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cheers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"total\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"perPage\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"currentPage\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"lastPage\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"links\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"first\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"last\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"next\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"prev\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"first\",\r",
									"        \"last\",\r",
									"        \"next\",\r",
									"        \"prev\"\r",
									"      ]\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"sender\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"team\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"desc\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"members\": {\r",
									"                  \"type\": \"array\",\r",
									"                  \"items\": [\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  ]\r",
									"                },\r",
									"                \"boards\": {\r",
									"                  \"type\": \"array\",\r",
									"                  \"items\": [\r",
									"                    {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  ]\r",
									"                },\r",
									"                \"type\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"archived\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"status\": {\r",
									"                      \"type\": \"boolean\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"status\"\r",
									"                  ]\r",
									"                },\r",
									"                \"createdAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"updatedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"__v\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"blast\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"bucket\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"checkIn\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"groupChat\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"schedule\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"_id\",\r",
									"                \"name\",\r",
									"                \"desc\",\r",
									"                \"members\",\r",
									"                \"boards\",\r",
									"                \"type\",\r",
									"                \"archived\",\r",
									"                \"createdAt\",\r",
									"                \"updatedAt\",\r",
									"                \"__v\",\r",
									"                \"blast\",\r",
									"                \"bucket\",\r",
									"                \"checkIn\",\r",
									"                \"groupChat\",\r",
									"                \"schedule\"\r",
									"              ]\r",
									"            },\r",
									"            \"subscribers\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"content\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"childContent\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"grandChildContent\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"readBy\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"reader\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"readAt\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"reader\",\r",
									"                    \"readAt\",\r",
									"                    \"_id\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"service\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"serviceType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"serviceId\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"serviceType\",\r",
									"                \"serviceId\"\r",
									"              ]\r",
									"            },\r",
									"            \"childService\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"serviceType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"serviceId\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"serviceType\",\r",
									"                \"serviceId\"\r",
									"              ]\r",
									"            },\r",
									"            \"grandChildService\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"serviceType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"serviceId\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"serviceType\",\r",
									"                \"serviceId\"\r",
									"              ]\r",
									"            },\r",
									"            \"activities\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"createdAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"updatedAt\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"__v\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"cheers\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"_id\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"content\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"creator\": {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"_id\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"photoUrl\": {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"_id\",\r",
									"                        \"photoUrl\"\r",
									"                      ]\r",
									"                    },\r",
									"                    \"receiver\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"primaryParent\": {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"id\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"type\": {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"id\",\r",
									"                        \"type\"\r",
									"                      ]\r",
									"                    },\r",
									"                    \"secondaryParent\": {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"id\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"type\": {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"id\",\r",
									"                        \"type\"\r",
									"                      ]\r",
									"                    },\r",
									"                    \"thirdParent\": {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"id\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"type\": {\r",
									"                          \"type\": \"string\"\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"id\",\r",
									"                        \"type\"\r",
									"                      ]\r",
									"                    },\r",
									"                    \"isNotified\": {\r",
									"                      \"type\": \"boolean\"\r",
									"                    },\r",
									"                    \"company\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"team\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"createdAt\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"updatedAt\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"__v\": {\r",
									"                      \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"notification\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"_id\",\r",
									"                    \"content\",\r",
									"                    \"creator\",\r",
									"                    \"receiver\",\r",
									"                    \"primaryParent\",\r",
									"                    \"secondaryParent\",\r",
									"                    \"thirdParent\",\r",
									"                    \"isNotified\",\r",
									"                    \"company\",\r",
									"                    \"team\",\r",
									"                    \"createdAt\",\r",
									"                    \"updatedAt\",\r",
									"                    \"__v\",\r",
									"                    \"notification\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"_id\",\r",
									"            \"sender\",\r",
									"            \"company\",\r",
									"            \"team\",\r",
									"            \"subscribers\",\r",
									"            \"content\",\r",
									"            \"childContent\",\r",
									"            \"grandChildContent\",\r",
									"            \"readBy\",\r",
									"            \"service\",\r",
									"            \"childService\",\r",
									"            \"grandChildService\",\r",
									"            \"activities\",\r",
									"            \"createdAt\",\r",
									"            \"updatedAt\",\r",
									"            \"__v\",\r",
									"            \"cheers\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"total\",\r",
									"    \"perPage\",\r",
									"    \"currentPage\",\r",
									"    \"lastPage\",\r",
									"    \"links\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3bbd50d5-0731-44fb-a8fb-f94246b67b00"
							}
						}
					],
					"_postman_id": "52df4b6a-894d-4835-ab71-191e4a729a20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/cheers?&limit=5&page=1&sortBy=updatedAt&orderBy=desc&companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"cheers"
							],
							"query": [
								{
									"key": null,
									"value": ""
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "sortBy",
									"value": "updatedAt"
								},
								{
									"key": "orderBy",
									"value": "desc"
								},
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Mark As Read by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Update mark read notification and activities successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e66fcf13-8432-4dc9-8ea4-8fedc5d3a489"
							}
						}
					],
					"_postman_id": "045bbb61-9b17-45a8-b656-95066fb5bee6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/notifications/{{notifid}}?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"notifications",
								"{{notifid}}"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Mark As Read By Select",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Update mark read notification and activities successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c867f37c-d1aa-4306-aed7-6ce979b9f72c"
							}
						}
					],
					"_postman_id": "6c7a3dca-8443-49f1-9126-663111f4eeb5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/notifications?selectBy=selected&companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"notifications"
							],
							"query": [
								{
									"key": "selectBy",
									"value": "selected"
								},
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Mark All As Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Test response data display a message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Update mark read notification and activities successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "83ef60e0-5677-4781-89a6-9e67bb98df96"
							}
						}
					],
					"_postman_id": "7c83b4d7-c083-44b7-ab4a-03c804a5028c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/notifications?companyId=61eba2c85080f47b25ddc8f8",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"notifications"
							],
							"query": [
								{
									"key": "companyId",
									"value": "61eba2c85080f47b25ddc8f8"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "ee0d4e4c-7b1e-468a-897f-a50437b67f1c"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "da01015b-57ea-4bde-9d68-bf71d9dacab5"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "53b94fad-c141-4b6d-bc8e-4e43842dd05e"
			}
		}
	],
	"variable": [
		{
			"id": "40e7eb40-4030-4e66-a73f-3babac9db65d",
			"key": "url",
			"value": "https://stagingapi.cicle.app",
			"type": "string"
		},
		{
			"id": "3b1a772f-e324-4323-8491-e81f32c9e2a1",
			"key": "auth",
			"value": "jwt eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjYzMDg2NzBhMzU4ZjcyZWVlMDJmYTNlZSIsImdvb2dsZUlkIjoiMTA0MTA0MzA1NTM5Mjk4Mjk4MTQxIiwiZW1haWwiOiJpa3JhbWFoLm1hZ2hmaXJhaDI4QGdtYWlsLmNvbSIsImZ1bGxOYW1lIjoiRmlyYSIsInBob3RvVXJsIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FGZFp1Y29DVk9TV29WckFEV2dad0RZY0hjbnFuVURwRkktRHJraHBFSkcxPXM5Ni1jIiwiYmlvIjoiU3R1ZGVudCBvZiBTZWtvbGFoIFFBIGJhdGNoIDE0Iiwic3RhdHVzIjoiU3R1ZGVudCIsImRlZmF1bHRDb21wYW55Ijp7Il9pZCI6IjYxZWJhMmM4NTA4MGY0N2IyNWRkYzhmOCJ9LCJjcmVhdGVkQXQiOiIyMDIyLTA4LTI2VDA2OjI0OjEwLjUyNVoiLCJ1cGRhdGVkQXQiOiIyMDIyLTA5LTI0VDA2OjE3OjA3LjI1OVoiLCJfX3YiOjB9LCJpYXQiOjE2NjQ1MzMwMDQsImV4cCI6MTY2NzEyNTAwNH0.J0kslWLgz_1h7WDSkP1r0NkXLM-Y8kb1n3vPLMd_fB4",
			"type": "string"
		}
	]
}
